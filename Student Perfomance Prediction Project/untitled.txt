 student_id  age  gender previous_education  study_hours  sleep_hours  \
0           1   24  Female        High School     4.394050     9.510559   
1           2   21  Female        High School     6.129396     9.705572   
2           3   28  Female           Bachelor     9.430758     7.462736   
3           4   25    Male          Associate     2.406927     6.142727   
4           5   22  Female        High School     1.215014     8.725295   

   attendance_rate family_income parent_education extracurricular_activities  \
0         0.737798        Medium          Primary                         No   
1         0.703874           Low           Higher                         No   
2         0.580609          High           Higher                        Yes   
3         0.828205           Low        Secondary                         No   
4         0.985575          High        Secondary                         No   

  study_group  stress_level  online_courses internet_access  travel_time  \
0         Yes             9               1             Yes     1.052750   
1         Yes             5               3             Yes     1.089575   
2         Yes             4               2             Yes     0.951897   
3          No             2               1              No     0.586568   
4          No             6               3              No     0.328647   

   performance performance_category  
0    98.183431                    A  
1    84.072116                    B  
2    75.233024                    C  
3    47.389229                    F  
4    67.574216                    D  
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1000 entries, 0 to 999
Data columns (total 17 columns):
 #   Column                      Non-Null Count  Dtype  
---  ------                      --------------  -----  
 0   student_id                  1000 non-null   int64  
 1   age                         1000 non-null   int64  
 2   gender                      1000 non-null   object 
 3   previous_education          1000 non-null   object 
 4   study_hours                 1000 non-null   float64
 5   sleep_hours                 1000 non-null   float64
 6   attendance_rate             1000 non-null   float64
 7   family_income               1000 non-null   object 
 8   parent_education            1000 non-null   object 
 9   extracurricular_activities  1000 non-null   object 
 10  study_group                 1000 non-null   object 
 11  stress_level                1000 non-null   int64  
 12  online_courses              1000 non-null   int64  
 13  internet_access             1000 non-null   object 
 14  travel_time                 1000 non-null   float64
 15  performance                 1000 non-null   float64
 16  performance_category        998 non-null    object 
dtypes: float64(5), int64(4), object(8)
memory usage: 132.9+ KB
None
Classification Model:
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
File ~\anaconda3\envs\new_env\Lib\site-packages\pandas\core\indexes\base.py:3805, in Index.get_loc(self, key)
   3804 try:
-> 3805     return self._engine.get_loc(casted_key)
   3806 except KeyError as err:

File index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()

File index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()

File pandas\\_libs\\hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()

File pandas\\_libs\\hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'performance_category'

The above exception was the direct cause of the following exception:

KeyError                                  Traceback (most recent call last)
File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\utils\__init__.py:505, in _get_column_indices(X, key)
    504 for col in columns:
--> 505     col_idx = all_columns.get_loc(col)
    506     if not isinstance(col_idx, numbers.Integral):

File ~\anaconda3\envs\new_env\Lib\site-packages\pandas\core\indexes\base.py:3812, in Index.get_loc(self, key)
   3811         raise InvalidIndexError(key)
-> 3812     raise KeyError(key) from err
   3813 except TypeError:
   3814     # If we have a listlike key, _check_indexing_error will raise
   3815     #  InvalidIndexError. Otherwise we fall through and re-raise
   3816     #  the TypeError.

KeyError: 'performance_category'

The above exception was the direct cause of the following exception:

ValueError                                Traceback (most recent call last)
Cell In[3], line 107
    105 # Train and evaluate classification model
    106 print("Classification Model:")
--> 107 classification_pipeline = train_and_evaluate_model(X, y_classification, preprocessor, is_classification=True)
    109 # Train and evaluate regression model
    110 print("\nRegression Model:")

Cell In[3], line 60, in train_and_evaluate_model(X, y, preprocessor, is_classification)
     56 pipeline = Pipeline(steps=[('preprocessor', preprocessor),
     57                            ('model', model)])
     59 # Fit the pipeline
---> 60 pipeline.fit(X_train, y_train)
     62 # Make predictions
     63 y_pred = pipeline.predict(X_test)

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\base.py:1474, in _fit_context.<locals>.decorator.<locals>.wrapper(estimator, *args, **kwargs)
   1467     estimator._validate_params()
   1469 with config_context(
   1470     skip_parameter_validation=(
   1471         prefer_skip_nested_validation or global_skip_validation
   1472     )
   1473 ):
-> 1474     return fit_method(estimator, *args, **kwargs)

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\pipeline.py:471, in Pipeline.fit(self, X, y, **params)
    428 """Fit the model.
    429 
    430 Fit all the transformers one after the other and sequentially transform the
   (...)
    468     Pipeline with fitted steps.
    469 """
    470 routed_params = self._check_method_params(method="fit", props=params)
--> 471 Xt = self._fit(X, y, routed_params)
    472 with _print_elapsed_time("Pipeline", self._log_message(len(self.steps) - 1)):
    473     if self._final_estimator != "passthrough":

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\pipeline.py:408, in Pipeline._fit(self, X, y, routed_params)
    406     cloned_transformer = clone(transformer)
    407 # Fit or load from cache the current transformer
--> 408 X, fitted_transformer = fit_transform_one_cached(
    409     cloned_transformer,
    410     X,
    411     y,
    412     None,
    413     message_clsname="Pipeline",
    414     message=self._log_message(step_idx),
    415     params=routed_params[name],
    416 )
    417 # Replace the transformer of the step with the fitted
    418 # transformer. This is necessary when loading the transformer
    419 # from the cache.
    420 self.steps[step_idx] = (name, fitted_transformer)

File ~\anaconda3\envs\new_env\Lib\site-packages\joblib\memory.py:312, in NotMemorizedFunc.__call__(self, *args, **kwargs)
    311 def __call__(self, *args, **kwargs):
--> 312     return self.func(*args, **kwargs)

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\pipeline.py:1303, in _fit_transform_one(transformer, X, y, weight, message_clsname, message, params)
   1301 with _print_elapsed_time(message_clsname, message):
   1302     if hasattr(transformer, "fit_transform"):
-> 1303         res = transformer.fit_transform(X, y, **params.get("fit_transform", {}))
   1304     else:
   1305         res = transformer.fit(X, y, **params.get("fit", {})).transform(
   1306             X, **params.get("transform", {})
   1307         )

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\utils\_set_output.py:295, in _wrap_method_output.<locals>.wrapped(self, X, *args, **kwargs)
    293 @wraps(f)
    294 def wrapped(self, X, *args, **kwargs):
--> 295     data_to_wrap = f(self, X, *args, **kwargs)
    296     if isinstance(data_to_wrap, tuple):
    297         # only wrap the first output for cross decomposition
    298         return_tuple = (
    299             _wrap_data_with_container(method, data_to_wrap[0], X, self),
    300             *data_to_wrap[1:],
    301         )

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\base.py:1474, in _fit_context.<locals>.decorator.<locals>.wrapper(estimator, *args, **kwargs)
   1467     estimator._validate_params()
   1469 with config_context(
   1470     skip_parameter_validation=(
   1471         prefer_skip_nested_validation or global_skip_validation
   1472     )
   1473 ):
-> 1474     return fit_method(estimator, *args, **kwargs)

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\compose\_column_transformer.py:906, in ColumnTransformer.fit_transform(self, X, y, **params)
    903 self._validate_transformers()
    904 n_samples = _num_samples(X)
--> 906 self._validate_column_callables(X)
    907 self._validate_remainder(X)
    909 if _routing_enabled():

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\compose\_column_transformer.py:496, in ColumnTransformer._validate_column_callables(self, X)
    494         columns = columns(X)
    495     all_columns.append(columns)
--> 496     transformer_to_input_indices[name] = _get_column_indices(X, columns)
    498 self._columns = all_columns
    499 self._transformer_to_input_indices = transformer_to_input_indices

File ~\anaconda3\envs\new_env\Lib\site-packages\sklearn\utils\__init__.py:513, in _get_column_indices(X, key)
    510         column_indices.append(col_idx)
    512 except KeyError as e:
--> 513     raise ValueError("A given column is not a column of the dataframe") from e
    515 return column_indices

ValueError: A given column is not a column of the dataframe
Click to add a cell.

















The Billion Dollar Code





))